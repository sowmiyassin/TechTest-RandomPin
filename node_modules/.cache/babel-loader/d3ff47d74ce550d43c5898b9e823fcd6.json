{"ast":null,"code":"export default ((state = {\n  storedPins: []\n}, action) => {\n  switch (action.type) {\n    case 'SAVE_ACTION':\n      let storedPins = state.storedPins;\n      storedPins.push(action.payload);\n      return {\n        storedPins\n      };\n      break;\n\n    case 'DELETE_ACTION':\n      let availablePins = state.storedPins.filter(storedpin => storedpin['pin'] !== action.payload['pin']);\n      return {\n        storedPins: availablePins\n      };\n      break;\n\n    case 'UPDATE_ACTION':\n      let updatePins = state.storedPins.map(storedpin => {\n        if (action.payload['pin'] === storedpin['pin']) {\n          storedpin['name'] = action.payload.name;\n        }\n\n        return storedpin;\n      });\n      return {\n        storedPins: updatePins\n      };\n      break;\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/Sowmiy/Desktop/GitHubTmobile/TechTest-RandomPin/src/saveReducer.tsx"],"names":["state","storedPins","action","type","push","payload","availablePins","filter","storedpin","updatePins","map","name"],"mappings":"AAAA,gBAAe,CAACA,KAAK,GAAG;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAAT,EAA4BC,MAA5B,KAA4C;AACzD,UAAQA,MAAM,CAACC,IAAf;AACC,SAAK,aAAL;AACA,UAAIF,UAAe,GAAGD,KAAK,CAACC,UAA5B;AACCA,MAAAA,UAAU,CAACG,IAAX,CAAgBF,MAAM,CAACG,OAAvB;AACA,aAAO;AACNJ,QAAAA;AADM,OAAP;AAGA;;AACD,SAAK,eAAL;AACG,UAAIK,aAAa,GAAGN,KAAK,CAACC,UAAN,CAAiBM,MAAjB,CAAyBC,SAAD,IAAoBA,SAAS,CAAC,KAAD,CAAT,KAAqBN,MAAM,CAACG,OAAP,CAAe,KAAf,CAAjE,CAApB;AACF,aAAO;AACNJ,QAAAA,UAAU,EAAEK;AADN,OAAP;AAGA;;AACD,SAAK,eAAL;AACG,UAAIG,UAAU,GAAGT,KAAK,CAACC,UAAN,CAAiBS,GAAjB,CAAsBF,SAAD,IAAoB;AAC1D,YAAIN,MAAM,CAACG,OAAP,CAAe,KAAf,MAA0BG,SAAS,CAAC,KAAD,CAAvC,EAAgD;AAC5CA,UAAAA,SAAS,CAAC,MAAD,CAAT,GAAoBN,MAAM,CAACG,OAAP,CAAeM,IAAnC;AACH;;AACD,eAAOH,SAAP;AACC,OALgB,CAAjB;AAMF,aAAO;AACNP,QAAAA,UAAU,EAAEQ;AADN,OAAP;AAGA;;AACD;AACC,aAAOT,KAAP;AA1BF;AA4BA,CA7BF","sourcesContent":["export default (state = { storedPins: []}, action: any) => {\r\n  switch (action.type) {\r\n   case 'SAVE_ACTION': \r\n   let storedPins: any = state.storedPins;\r\n    storedPins.push(action.payload);\r\n    return {\r\n     storedPins\r\n    }\r\n    break;\r\n   case 'DELETE_ACTION': \r\n      let availablePins = state.storedPins.filter((storedpin: any) => storedpin['pin'] !== action.payload['pin']);\r\n    return {\r\n     storedPins: availablePins\r\n    }\r\n    break;  \r\n   case 'UPDATE_ACTION': \r\n      let updatePins = state.storedPins.map((storedpin: any) => {\r\n      if (action.payload['pin'] === storedpin['pin']) {\r\n          storedpin['name'] = action.payload.name;\r\n      }\r\n      return storedpin;\r\n      });\r\n    return {\r\n     storedPins: updatePins\r\n    }\r\n    break;         \r\n   default:\r\n    return state\r\n  }\r\n }"]},"metadata":{},"sourceType":"module"}